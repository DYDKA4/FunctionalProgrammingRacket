(define (fib-list-a n)
      (cond
        [(<= n 0) '()]
        [(> n 0)
         (let loop ((fib-n-1 1) (fib-n-2 0) (i (- n 1)) (arr '(0)) )
           (if (= i 0) (reverse arr)
               (loop (+ fib-n-1 fib-n-2) fib-n-1 (if (even? fib-n-1)(- i 1)i)
                     (cons fib-n-1 arr)
                     )
               )
           )
         ]
        )
      ) 
(define (list-fib-squares-a n)
    (map (lambda (number)
           (* number number))
         (fib-list-a n))
    )
(define (list-fib-squares-b n)
    (foldr (lambda (number result)
             (cons (* number number) result))
           '()
           (fib-list-a n)
           )
    )
(define (process lst)
    (let ((first-elem (foldl * 1 (car lst))))
      (filter (lambda (x)
                (> (foldl + 0 x) first-elem)) lst)
      )
    )